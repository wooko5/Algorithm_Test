"""
처음에는 범위 안의 숫자를 모두 생성한 임시배열을 만들고, 반복해서 공통된 부분을 만들고
만약에 공통된 부분이 없다면 answer = 1을 +1해주는 방식으로 했다 직관적이고 정확하지만 
너무 큰 시간복잡도...가 문제였다.
인터넷을 통해 힌트를 얻고, 진출시점을 기준으로 오름차순한 방법을 알게됐다(힌트를 얻고 스스로 구현)
진출시점을 오름차순으로 하는 이유는 
가장 진출시점이 빠른 차량부터 체크를 하면서 카메라의 위치를 재조정할 수 있기 때문이다.
만약에 카메라 위치가 차량의 진입시점과 같거나 크다면 카메라가 검출할 수 있는 범위다. 
그러나 카메라 위치가 차량의 진입시점보다 작다면 카메라가 검출할 수 없는 범위이기 때문에
카메라 위치를 그 차량의 가장 앞인 진출시점으로 초기화하는 것이다.

후기: 구현은 쉽지만 진출시점을 기준으로 오름차순한다는 개념을 고안하기 굉장히 힘들었다(그래서 힌트봄 ^^)
2021.07.29
"""

def solution(routes):
    camera = 0
    camera_position = -30001 
    routes = sorted(routes, key = lambda x : x[1]) # 차량의 진출시점(exit)를 기준으로 오름차순

    for i in range(len(routes)):
        if camera_position < routes[i][0]: # 만약에 카메라 위치가 차량의 진입시점보다 작다면(카메라가 차량단속을 못한다는 뜻) 
            camera += 1 # 카메라 추가설치
            camera_position = routes[i][1] # 카메라의 위치를 차량의 진출시점으로 초기화
    
    return camera


routes = [[-20,15], [-14,-5], [-18,-13], [-5,-3]]
print(solution(routes))